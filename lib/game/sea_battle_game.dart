import 'dart:io';
import 'game_board.dart';
import 'computer_ai.dart';
import '../enums/game_enums.dart';

class SeaBattleGame {
  static const int boardSize = 6;
  static const List<int> shipSizes = [3, 2, 2, 1, 1, 1];

  late GameBoard playerBoard;
  late GameBoard computerBoard;
  late ComputerAI computerAI;

  int playerShots = 0;
  int playerHits = 0;
  int computerShots = 0;
  int computerHits = 0;

  void startGame() {
    print('üéØ –ó–ê–ü–£–°–ö –ú–û–†–°–ö–û–ì–û –ë–û–Ø!');
    print('=' * 40);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å–æ–∫
    playerBoard = GameBoard(boardSize);
    computerBoard = GameBoard(boardSize);
    computerAI = ComputerAI(boardSize);

    // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
    setupPlayerShips();
    computerBoard.placeShipsAutomatically(shipSizes);

    print('\n‚úÖ –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!\n');
    gameLoop();
  }

  void setupPlayerShips() {
    print('\n‚öì –†–ê–°–°–¢–ê–ù–û–í–ö–ê –í–ê–®–ò–• –ö–û–†–ê–ë–õ–ï–ô');
    print('=' * 30);

    while (true) {
      print('\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏:');
      print('1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞');
      print('2 - –†—É—á–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞');
      stdout.write('–í–∞—à –≤—ã–±–æ—Ä (1/2): ');

      var choice = stdin.readLineSync();
      if (choice == '1') {
        if (playerBoard.placeShipsAutomatically(shipSizes)) {
          break;
        } else {
          print(
              '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–∞–±–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
      } else if (choice == '2') {
        if (manualShipPlacement()) {
          break;
        }
      } else {
        print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.');
      }
    }

    print('\n‚úÖ –í–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã!');
    print('–í–∞—à–µ –ø–æ–ª–µ:');
    playerBoard.display(showShips: true);
  }

  bool manualShipPlacement() {
    print('\nüìã –†–£–ß–ù–ê–Ø –†–ê–°–°–¢–ê–ù–û–í–ö–ê –ö–û–†–ê–ë–õ–ï–ô');
    print('–†–∞–∑–º–µ—Ä –ø–æ–ª—è: $boardSize x $boardSize');
    print('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏: ${shipSizes.join(', ')} –ø–∞–ª—É–±');
    print('–§–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: x y –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ(h/v)');
    print('–ü—Ä–∏–º–µ—Ä: 0 0 h - –∫–æ—Ä–∞–±–ª—å –æ—Ç (0,0) –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ –≤–ø—Ä–∞–≤–æ');
    print('–ü—Ä–∏–º–µ—Ä: 2 3 v - –∫–æ—Ä–∞–±–ª—å –æ—Ç (2,3) –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –≤–Ω–∏–∑');

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ—Å–∫—É –¥–ª—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏
    var tempBoard = GameBoard(boardSize);

    for (var i = 0; i < shipSizes.length; i++) {
      var shipSize = shipSizes[i];
      var shipNumber = i + 1;

      while (true) {
        print('\n' + '=' * 40);
        print('–ö–æ—Ä–∞–±–ª—å $shipNumber/${shipSizes.length} ($shipSize-–ø–∞–ª—É–±–Ω—ã–π)');
        tempBoard.display(showShips: true);

        stdout.write('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (x y h/v): ');
        var input = stdin.readLineSync()?.toLowerCase().split(' ');

        if (input == null || input.length != 3) {
          print('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: x y h/v');
          continue;
        }

        var x = int.tryParse(input[0]);
        var y = int.tryParse(input[1]);
        var direction = input[2];

        if (x == null || y == null) {
          print('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!');
          continue;
        }

        if (direction != 'h' && direction != 'v') {
          print(
              '‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å h (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ) –∏–ª–∏ v (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ)!');
          continue;
        }

        bool isHorizontal = direction == 'h';

        if (tempBoard.placeShip(x, y, shipSize, isHorizontal)) {
          print('‚úÖ –ö–æ—Ä–∞–±–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω!');
          break;
        } else {
          print('‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å –∑–¥–µ—Å—å!');
          print(
              '–ü—Ä–∏—á–∏–Ω—ã: –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º –∫–æ—Ä–∞–±–ª–µ–º');
        }
      }
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –¥–æ—Å–∫—É
    playerBoard = tempBoard;
    return true;
  }

  void gameLoop() {
    bool playerTurn = true;

    while (true) {
      if (playerTurn) {
        playerTurnAction();
        if (checkGameOver()) break;
        playerTurn = false;
      } else {
        computerTurnAction();
        if (checkGameOver()) break;
        playerTurn = true;
      }
    }
  }

  void playerTurnAction() {
    print('\nüéØ –í–ê–® –•–û–î');
    print('=' * 20);
    print('–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:');
    computerBoard.display(showShips: false);

    print('\n–í–∞—à–µ –ø–æ–ª–µ:');
    playerBoard.display(showShips: true);

    while (true) {
      stdout.write('\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ (x y): ');
      var input = stdin.readLineSync()?.split(' ');

      if (input == null || input.length != 2) {
        print('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!');
        continue;
      }

      var x = int.tryParse(input[0]);
      var y = int.tryParse(input[1]);

      if (x == null || y == null) {
        print('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!');
        continue;
      }

      if (x < 0 || x >= boardSize || y < 0 || y >= boardSize) {
        print('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ ${boardSize - 1}!');
        continue;
      }

      playerShots++;
      var result = computerBoard.shoot(x, y);

      if (result == ShotResult.alreadyShot) {
        print('‚ùå –í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É!');
        playerShots--;
        continue;
      } else if (result == ShotResult.hit) {
        playerHits++;
        print('üéØ –ü–æ–ø–∞–¥–∞–Ω–∏–µ!');

        if (computerBoard.isShipSunk(x, y)) {
          var shipSize = computerBoard.getShipSizeAt(x, y);
          print('üí• –ü–æ—Ç–æ–ø–ª–µ–Ω ${shipSize}-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å!');
        }
      } else {
        print('üí¶ –ü—Ä–æ–º–∞—Ö!');
      }
      break;
    }
  }

  void computerTurnAction() {
    print('\nü§ñ –•–û–î –ö–û–ú–ü–¨–Æ–¢–ï–†–ê');
    print('=' * 20);

    var shot = computerAI.getNextShot();
    computerShots++;

    print('–ö–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${shot.x} ${shot.y}');

    var result = playerBoard.shoot(shot.x, shot.y);
    computerAI.updateLastShot(shot, result);

    if (result == ShotResult.hit) {
      computerHits++;
      print('üéØ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–ø–∞–ª!');

      if (playerBoard.isShipSunk(shot.x, shot.y)) {
        var shipSize = playerBoard.getShipSizeAt(shot.x, shot.y);
        print('üí• –ö–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Ç–æ–ø–∏–ª –≤–∞—à ${shipSize}-–ø–∞–ª—É–±–Ω—ã–π –∫–æ—Ä–∞–±–ª—å!');
        computerAI.resetTargeting();
      }
    } else {
      print('üí¶ –ö–æ–º–ø—å—é—Ç–µ—Ä –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!');
    }

    print('\n–í–∞—à–µ –ø–æ–ª–µ –ø–æ—Å–ª–µ –≤—ã—Å—Ç—Ä–µ–ª–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:');
    playerBoard.display(showShips: true);

    stdout.write('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
    stdin.readLineSync();
  }

  bool checkGameOver() {
    if (computerBoard.allShipsSunk()) {
      showGameResult(true);
      return true;
    } else if (playerBoard.allShipsSunk()) {
      showGameResult(false);
      return true;
    }
    return false;
  }

  void showGameResult(bool playerWon) {
    print('\n' + '=' * 50);
    print('        –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!');
    print('=' * 50);

    if (playerWon) {
      print('üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –í–´–ò–ì–†–ê–õ–ò! üéâ');
    } else {
      print('üíª –ö–û–ú–ü–¨–Æ–¢–ï–† –í–´–ò–ì–†–ê–õ! üíª');
    }

    print('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†–´:');
    print('‚îÄ' * 25);
    print('–í–∞—à–∏ –≤—ã—Å—Ç—Ä–µ–ª—ã: $playerShots');
    print('–í–∞—à–∏ –ø–æ–ø–∞–¥–∞–Ω–∏—è: $playerHits');

    if (playerShots > 0) {
      double accuracy = (playerHits / playerShots) * 100;
      print('–í–∞—à–∞ —Ç–æ—á–Ω–æ—Å—Ç—å: ${accuracy.toStringAsFixed(1)}%');
    }

    print('–í—ã—Å—Ç—Ä–µ–ª—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: $computerShots');
    print('–ü–æ–ø–∞–¥–∞–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: $computerHits');
  }
}
